                         ;;============================================================================
                         ;; File: software.psm
                         ;; This is the PicoBlaze example game program for EE178 Lab #8.
                         ;; No guarantee this is bug-free but it is a playable example.
                         ;;============================================================================
                         ;;============================================================================
                         ;; Editor: Jacky, Thi
                         ;; Current Version: 2.0
                         ;; Change Log: 1.0 - initial file provided
                         ;;      1.1 - replaced padl with tank and cleaned up code
                         ;;      1.2 - added in bullet, bullet shooting, and bullet resetting
                         ;;      1.3 - added in shield drawings
                         ;;      1.4 - completion of shield hit detection and bullet reset
                         ;;      1.5 - added in shield health, with full/dead shield models
                         ;;      2.0 - merged with alien code
                         ;;      2.1 - merged with space invaders logo, cleaned up code
                         ;;============================================================================
                         ;;============================================================================
                         ;; Ports and related constants.
                         ;;============================================================================
                         CONSTANT stax, 00                  ; port for 8-bit start-x
                         CONSTANT stay, 01                  ; port for 8-bit start-y
                         CONSTANT endx, 02                  ; port for 8-bit end-x
                         CONSTANT endy, 03                  ; port for 8-bit end-y
                         CONSTANT busy, 04                  ; port for 8-bit busy
                         CONSTANT beam, 05                  ; port for 8-bit beam
                         CONSTANT mode, 06                  ; port for 8-bit mode
                         CONSTANT prng, 07                  ; port for 8-bit prng
                         CONSTANT leds_lo, 08               ; port for 8-bit led data out
                         CONSTANT leds_hi, 09               ; port for 8-bit led data out
                         CONSTANT qssd_lo, 0A               ; port for 8-bit qssd data out
                         CONSTANT qssd_hi, 0B               ; port for 8-bit qssd data out
                         CONSTANT qssd_dp, 0C               ; port for 8-bit qssd data out
                         CONSTANT switches_lo, 0D           ; port for 8-bit switch input
                         CONSTANT switches_hi, 0E           ; port for 8-bit switch input
                         CONSTANT buttons, 0F               ; port for 8-bit button input
                         CONSTANT busy_go, 01               ; go command and busy status
                         CONSTANT beam_hi, 0F               ; beam high intensity
                         CONSTANT beam_md, 07               ; beam med intensity
                         CONSTANT beam_lo, 03               ; beam low intensity
                         CONSTANT mode_hld, 00              ; mode hold framebuffer
                         CONSTANT mode_clr, 01              ; mode clear framebuffer
                         CONSTANT mode_lin, 02              ; mode linear decay
                         CONSTANT mode_exp, 03              ; mode exponential decay
                         CONSTANT buttons_ct, 10            ; center
                         CONSTANT buttons_up, 08            ; up
                         CONSTANT buttons_dn, 04            ; down
                         CONSTANT buttons_lf, 02            ; left
                         CONSTANT buttons_rt, 01            ; right
                         ;;============================================================================
                         ;; Game state declarations.
                         ;;============================================================================
                         NAMEREG s0, gs_major
                         CONSTANT gs_major_attrone, 00      ; state assignment
                         CONSTANT gs_major_attrtwo, 01      ; state assignment
                         CONSTANT gs_major_playing, 02      ; state assignment
                         CONSTANT gs_major_gameend, 03      ; state assignment
                         NAMEREG s1, gs_minor
                         CONSTANT gs_minor_begins, 00       ; counter initialize
                         CONSTANT gs_minor_twosec, 78       ; frame count about 2.0 secs
                         CONSTANT gs_minor_onesec, 3C       ; frame count about 1.0 secs
                         CONSTANT gs_minor_getrdy, 1E       ; frame count about 0.5 secs
                         NAMEREG s2, gs_tbulletx
                         NAMEREG s3, gs_tbullety
                         CONSTANT gs_tbullet_xdim, 00       ; it's this plus 1
                         CONSTANT gs_tbullet_ydim, 05       ; it's this plus 1
                         CONSTANT gs_tbullet_speed, 08      ; pixels per frame
                         NAMEREG s5, gs_tankx
                         CONSTANT gs_tanky, F4              ; tank y location
                         CONSTANT gs_tank_xdim, 10          ; it's this plus 1
                         CONSTANT gs_tank_ydim, 08          ; it's this plus 1
                         CONSTANT gs_tank_speed, 02         ; pixels per frame
                         NAMEREG s6, shieldshp              ; full health register counter for 4 shields: 00 00 00 00
                         CONSTANT shield1hit, 40            ; add 01 from shieldshp when shield 1 is hit: 01 00 00 00
                         CONSTANT shield2hit, 10            ; add 01 from shieldshp when shield 2 is hit: 00 01 00 00
                         CONSTANT shield3hit, 04            ; add 01 from shieldshp when shield 3 is hit: 00 00 01 00
                         CONSTANT shield4hit, 01            ; add 01 from shieldshp when shield 4 is hit: 00 00 00 01
                         CONSTANT shield1dead_test, 3F      ; used to test shield1 hp with shieldshp reg: 00 11 11 11
                         CONSTANT shield2dead_test, CF      ; used to test shield2 hp with shieldshp reg: 11 00 11 11
                         CONSTANT shield3dead_test, F3      ; used to test shield3 hp with shieldshp reg: 11 11 00 11
                         CONSTANT shield4dead_test, FC      ; used to test shield4 hp with shieldshp reg: 11 11 11 00
                         CONSTANT shieldxdim, 18            ; shield x dimension is 24 pixels
                         CONSTANT shieldydim, 14            ; shield y dimension is 20 pixels
                         CONSTANT shield1x, 10              ; shield 1 starts at x = 16
                         CONSTANT shield2x, 52              ; shield 2 starts at x = 82
                         CONSTANT shield3x, 95              ; shield 3 starts at x = 149
                         CONSTANT shield4x, D7              ; shield 4 starts at x = 215
                         CONSTANT shieldy, D0               ; shield starts at y = 208
                         CONSTANT alien_x, 00               ; scratchpad memory location
                         CONSTANT alien_y, 01
                         CONSTANT alien_1_hp, 02
                         CONSTANT alien_2_hp, 03
                         CONSTANT alien_3_hp, 04
                         CONSTANT alien_4_hp, 05
                         CONSTANT alien_5_hp, 06
                         CONSTANT alien_x_dim, 0A
                         CONSTANT alien_y_dim, 04
                         ;;============================================================================
                         ;; Global variables.
                         ;;============================================================================
                         NAMEREG s7, resvd1                 ; reserved
                         NAMEREG s8, resvd2                 ; reserved
                         NAMEREG sC, resvd3                 ; reserved
                         NAMEREG s4, resvd4                 ; reserved
                         NAMEREG s9, xpos                   ; for drawing routines
                         NAMEREG sA, ypos                   ; for drawing routines
                         NAMEREG sB, tbullet_en             ; for tank bullet enable
                         NAMEREG sD, btnsamp                ; button sample
                         NAMEREG sE, loopvar                ; for loops
                         NAMEREG sF, scratch                ; for scratch
                         ;;============================================================================
                         ;; Other stuff.
                         ;;============================================================================
                         CONSTANT minusone, FF              ; minusone
                         CONSTANT minusmax, 80              ; minus 128
                         CONSTANT plusmax, 7F               ; plus 127
                         CONSTANT zero, 00                  ; zero
                         CONSTANT one, 01                   ; one
                         ;;============================================================================
                         ;; Boot.
                         ;; This performs one-time initialization of the hardware and the game state.
                         ;;============================================================================
                   boot: 
                         CALL hw_init                       ; initial hardware setup
                         CALL gs_init                       ; set initial game state
                         ENABLE INTERRUPT                   ; enable vblnk interrupt
                         ;;============================================================================
                         ;; Main.
                         ;; This is an empty loop, does nothing, waiting for interrupts to occur.
                         ;;============================================================================
                   main: 
                         JUMP main                          ; empty loop, does nothing
                         ;;============================================================================
                         ;; Interrupt.
                         ;; This is the main game logic.  At each interrupt, the procedure is to read
                         ;; the user input, calculate the next game state, and then draw the game
                         ;; state on the display.
                         ;;============================================================================
                    isr: 
                         CALL user_input                    ; get the user input
                         CALL calc_next_gs                  ; calculate next state
                         CALL draw_gs                       ; draw the state
                         RETURNI ENABLE                     ; return with enable
                         ;;============================================================================
                         ;; Subroutine: hw_init
                         ;; This puts the hardware into a known, initial state.  This includes a wait
                         ;; to make sure the line drawing harware is idle (a wait loop which is also
                         ;; called from other routines, as a subroutine).
                         ;;============================================================================
                hw_init: 
                         LOAD scratch, zero                 ; going to use lot of zero
                         OUTPUT scratch, leds_lo            ; turn off lo leds
                         OUTPUT scratch, leds_hi            ; turn off hi leds
                         OUTPUT scratch, qssd_lo            ; zeroize qssd lo
                         OUTPUT scratch, qssd_hi            ; zeroize qssd hi
                         OUTPUT scratch, qssd_dp            ; turn off qssd dots
                         LOAD scratch, mode_exp             ; load desired mode
                         OUTPUT scratch, mode               ; program the framebuffer
                         LOAD scratch, beam_hi              ; load desired beam
                         OUTPUT scratch, beam               ; program the framebuffer
           hw_init_wait: 
                         INPUT scratch, busy                ; get framebuffer busy
                         COMPARE scratch, busy_go           ; check framebuffer busy
                         JUMP Z, hw_init_wait               ; back to wait if busy
                         RETURN                             ; return
                         ;;============================================================================
                         ;; Subroutine: gs_init
                         ;; This puts the game into a known, initial state.  I've assigned all of the
                         ;; game state to a known value -- although some of these assignments do not
                         ;; really matter based on design of the game state machine.
                         ;;============================================================================
                gs_init: 
                         LOAD gs_major, gs_major_attrone    ; start in attract mdoe
                         LOAD gs_minor, gs_minor_begins     ; start with counter zero
                         LOAD gs_tbulletx, zero             ; doesn't really matter
                         LOAD gs_tbullety, zero             ; doesn't really matter
                         LOAD gs_tankx, zero                ; doesn't really matter
                         LOAD tbullet_en, zero              ; start with top button not pressed
                         LOAD shieldshp, zero               ; start shieldshp as 00 00 00 00
                         LOAD scratch, zero                 ; loads zero to scratch
                         STORE scratch, alien_x             ; aliens start at 0,0
                         STORE scratch, alien_y             ; aliens start at 0,0
                         LOAD scratch, FF                   ; loads ff to scratch
                         STORE scratch, alien_1_hp          ; sets full health to aliens
                         STORE scratch, alien_2_hp          ; sets full health to aliens
                         STORE scratch, alien_3_hp          ; sets full health to aliens
                         STORE scratch, alien_4_hp          ; sets full health to aliens
                         STORE scratch, alien_5_hp          ; sets full health to aliens
                         RETURN                             ; return
                         ;;============================================================================
                         ;; Subroutine: user_input
                         ;; This samples the user inputs required for this game (which happens to be
                         ;; only the buttons, but this could is extended to the switches as well).
                         ;; This subroutine calls an example of how to use the RAM scratchpad, by
                         ;; implementing access of a 256x8 array using switches, button, and qssd.
                         ;; The call to the ram_example routine (and ram_example routine itself)
                         ;; can be entirely removed as it is not needed in this game.
                         ;;============================================================================
             user_input: 
                         INPUT btnsamp, buttons             ; sample button hardware
                         RETURN                             ; return
                         ;;============================================================================
                         ;; Subroutine: calc_next_gs
                         ;; This logic calculates the next state of the game, given the sampled user
                         ;; inputs and the current state of the game.
                         ;;============================================================================
           calc_next_gs: 
                         COMPARE gs_major, gs_major_attrone ; are we in attrone?
                         JUMP Z, calc_attrone               ; do ns calc for attrone
                         COMPARE gs_major, gs_major_attrtwo ; are we in attrtwo?
                         JUMP Z, calc_attrtwo               ; do ns calc for attrtwo
                         COMPARE gs_major, gs_major_playing ; are we in playing?
                         JUMP Z, calc_playing               ; do ns calc for playing
                         COMPARE gs_major, gs_major_gameend ; are we in gameend?
                         JUMP Z, calc_gameend               ; do ns calc for gameend
                         RETURN 
           calc_attrone: 
                         TEST btnsamp, buttons_ct           ; starts game if center button is pressed
                         JUMP NZ, initial_positions         ; othersize, swap between bong and ec
                         COMPARE gs_minor, gs_minor_twosec  ; attrone is bong, attrtwo is ec
                         JUMP Z, goto_attrtwo
                         ADD gs_minor, one
                         RETURN 
           calc_attrtwo: 
                         TEST btnsamp, buttons_ct
                         JUMP NZ, initial_positions
                         COMPARE gs_minor, gs_minor_onesec
                         JUMP Z, goto_attrone
                         ADD gs_minor, one
                         RETURN 
      initial_positions: 
                         LOAD gs_tankx, gs_tank_xdim        ; start tank at the bottom horizontal center of screen
                         SRX gs_tankx
                         XOR gs_tankx, minusone
                         ADD gs_tankx, one
                         ADD gs_tankx, minusmax
                         LOAD scratch, gs_tankx             ; start bullet at the upper center of the tank
                         ADD scratch, 08
                         LOAD gs_tbulletx, scratch
                         LOAD scratch, gs_tanky
                         SUB scratch, 03
                         LOAD gs_tbullety, scratch
                         LOAD gs_major, gs_major_playing
                         LOAD gs_minor, gs_minor_begins
                         LOAD shieldshp, zero               ; start shieldshp as 00 00 00 00
                         LOAD scratch, zero                 ; loads zero to scratch
                         STORE scratch, alien_x             ; aliens start at 0,0
                         STORE scratch, alien_y             ; aliens start at 0,0
                         LOAD scratch, FF                   ; loads ff to scratch
                         STORE scratch, alien_1_hp          ; sets full health to aliens
                         STORE scratch, alien_2_hp          ; sets full health to aliens
                         STORE scratch, alien_3_hp          ; sets full health to aliens
                         STORE scratch, alien_4_hp          ; sets full health to aliens
                         STORE scratch, alien_5_hp          ; sets full health to aliens
                         RETURN 
           calc_playing: 
                         CALL upd_tank                      ; go to update tank position
                         TEST btnsamp, buttons_up           ; check if the top button was pushed
                         CALL NZ, load_tbullet_en           ; if it was, enable bullet enable
                         COMPARE tbullet_en, zero           ; check if bullet enable is enabled
                         CALL NZ, upd_tbullet               ; if it is, update shot bullet position
                         COMPARE shieldshp, FF              ; check if shields hp is depleted
                         CALL NZ, upd_shields               ; if it is, stop updating shields
                         TEST gs_minor, 01
                         CALL C, upd_aliens                 ; update aliens
                         ADD gs_minor, one
                         RETURN 
             upd_aliens: 
                         FETCH scratch, alien_x
                         COMPARE scratch, 00
                         CALL Z, upd_aliens_y               ; if at end add one to y position
                         FETCH scratch, alien_1_hp          ;left shift aliens if left side is destroyed
                         TEST scratch, 01
                         FETCH scratch, alien_2_hp
                         TESTCY scratch, 01
                         FETCH scratch, alien_3_hp
                         TESTCY scratch, 01
                         FETCH scratch, alien_4_hp
                         TESTCY scratch, 01
                         FETCH scratch, alien_5_hp
                         TESTCY scratch, 01
                         CALL Z, alien_hp_shift
                         FETCH scratch, alien_1_hp
                         TEST scratch, FE
                         FETCH scratch, alien_2_hp
                         TESTCY scratch, FE
                         FETCH scratch, alien_3_hp
                         TESTCY scratch, FE
                         FETCH scratch, alien_4_hp
                         TESTCY scratch, FE
                         FETCH scratch, alien_5_hp
                         TESTCY scratch, FE
                         JUMP Z, upd_aliens_y_7
                         FETCH scratch, alien_1_hp
                         TEST scratch, FC
                         FETCH scratch, alien_2_hp
                         TESTCY scratch, FC
                         FETCH scratch, alien_3_hp
                         TESTCY scratch, FC
                         FETCH scratch, alien_4_hp
                         TESTCY scratch, FC
                         FETCH scratch, alien_5_hp
                         TESTCY scratch, FC
                         JUMP Z, upd_aliens_y_6
                         FETCH scratch, alien_1_hp
                         TEST scratch, F8
                         FETCH scratch, alien_2_hp
                         TESTCY scratch, F8
                         FETCH scratch, alien_3_hp
                         TESTCY scratch, F8
                         FETCH scratch, alien_4_hp
                         TESTCY scratch, F8
                         FETCH scratch, alien_5_hp
                         TESTCY scratch, F8
                         JUMP Z, upd_aliens_y_5
                         FETCH scratch, alien_1_hp
                         TEST scratch, F0
                         FETCH scratch, alien_2_hp
                         TESTCY scratch, F0
                         FETCH scratch, alien_3_hp
                         TESTCY scratch, F0
                         FETCH scratch, alien_4_hp
                         TESTCY scratch, F0
                         FETCH scratch, alien_5_hp
                         TESTCY scratch, F0
                         JUMP Z, upd_aliens_y_4
                         FETCH scratch, alien_1_hp
                         TEST scratch, E0
                         FETCH scratch, alien_2_hp
                         TESTCY scratch, E0
                         FETCH scratch, alien_3_hp
                         TESTCY scratch, E0
                         FETCH scratch, alien_4_hp
                         TESTCY scratch, E0
                         FETCH scratch, alien_5_hp
                         TESTCY scratch, E0
                         JUMP Z, upd_aliens_y_3
                         FETCH scratch, alien_1_hp
                         TEST scratch, C0
                         FETCH scratch, alien_2_hp
                         TESTCY scratch, C0
                         FETCH scratch, alien_3_hp
                         TESTCY scratch, C0
                         FETCH scratch, alien_4_hp
                         TESTCY scratch, C0
                         FETCH scratch, alien_5_hp
                         TESTCY scratch, C0
                         JUMP Z, upd_aliens_y_2
                         FETCH scratch, alien_1_hp
                         TEST scratch, 80
                         FETCH scratch, alien_2_hp
                         TESTCY scratch, 80
                         FETCH scratch, alien_3_hp
                         TESTCY scratch, 80
                         FETCH scratch, alien_4_hp
                         TESTCY scratch, 80
                         FETCH scratch, alien_5_hp
                         TESTCY scratch, 80
                         JUMP Z, upd_aliens_y_1
                         JUMP upd_aliens_y_0
        upd_aliens_cont: 
                         FETCH scratch, alien_y
                         TEST scratch, 01
                         CALL NC, upd_aliens_x_left
                         CALL C, upd_aliens_x_right
                         FETCH scratch, alien_y
                         COMPARE scratch, BE
                         JUMP NC, goto_gameend
                         FETCH scratch, alien_1_hp
                         COMPARE scratch, 00
                         FETCH scratch, alien_2_hp
                         COMPARECY scratch, 00
                         FETCH scratch, alien_3_hp
                         COMPARECY scratch, 00
                         FETCH scratch, alien_4_hp
                         COMPARECY scratch, 00
                         FETCH scratch, alien_5_hp
                         COMPARECY scratch, 00
                         JUMP Z, goto_gameend               ; end the game if aliens reach end
                         RETURN 
         upd_aliens_y_0: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         COMPARE scratch, 85                ; compare and check if at end
                         CALL Z, upd_aliens_y               ; if at end add one to y position
                         JUMP upd_aliens_cont
         upd_aliens_y_1: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         COMPARE scratch, 95                ; compare and check if at end
                         CALL Z, upd_aliens_y               ; if at end add one to y position
                         JUMP upd_aliens_cont
         upd_aliens_y_2: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         COMPARE scratch, A5                ; compare and check if at end
                         CALL Z, upd_aliens_y               ; if at end add one to y position
                         JUMP upd_aliens_cont
         upd_aliens_y_3: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         COMPARE scratch, B5                ; compare and check if at end
                         CALL Z, upd_aliens_y               ; if at end add one to y position
                         JUMP upd_aliens_cont
         upd_aliens_y_4: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         COMPARE scratch, C5                ; compare and check if at end
                         CALL Z, upd_aliens_y               ; if at end add one to y position
                         JUMP upd_aliens_cont
         upd_aliens_y_5: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         COMPARE scratch, D5                ; compare and check if at end
                         CALL Z, upd_aliens_y               ; if at end add one to y position
                         JUMP upd_aliens_cont
         upd_aliens_y_6: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         COMPARE scratch, E5                ; compare and check if at end
                         CALL Z, upd_aliens_y               ; if at end add one to y position
                         JUMP upd_aliens_cont
         upd_aliens_y_7: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         COMPARE scratch, F5                ; compare and check if at end
                         CALL Z, upd_aliens_y               ; if at end add one to y position
                         JUMP upd_aliens_cont
         alien_hp_shift: 
                         FETCH scratch, alien_1_hp
                         SR0 scratch
                         STORE scratch, alien_1_hp
                         FETCH scratch, alien_2_hp
                         SR0 scratch
                         STORE scratch, alien_2_hp
                         FETCH scratch, alien_3_hp
                         SR0 scratch
                         STORE scratch, alien_3_hp
                         FETCH scratch, alien_4_hp
                         SR0 scratch
                         STORE scratch, alien_4_hp
                         FETCH scratch, alien_5_hp
                         SR0 scratch
                         STORE scratch, alien_5_hp
                         FETCH scratch, alien_x
                         ADD scratch, 10
                         STORE scratch, alien_x
                         RETURN 
     upd_aliens_x_right: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         ADD scratch, one                   ; adds one to scratch
                         STORE scratch, alien_x             ; store scratch back into alien x position
                         RETURN 
      upd_aliens_x_left: 
                         FETCH scratch, alien_x             ; store alien x position to scratch
                         SUB scratch, one                   ; sub one to scratch
                         STORE scratch, alien_x             ; store scratch back into alien x position
                         RETURN 
           upd_aliens_y: 
                         FETCH scratch, alien_y             ; store alien y position to scratch
                         ADD scratch, 05                    ; adds one to scratch
                         STORE scratch, alien_y             ; store scratch back into alien y position
                         RETURN 
               upd_tank: 
                         LOAD scratch, zero                 ; update tank position
                         TEST btnsamp, buttons_lf
                         SUBCY scratch, zero
                         TEST btnsamp, buttons_rt
                         ADDCY scratch, zero
                         COMPARE scratch, minusone
                         CALL Z, upd_tank_lt
                         COMPARE scratch, one
                         CALL Z, upd_tank_rt
                         COMPARE tbullet_en, zero           ; if bullet enable is 0, update unshot bullet x position
                         RETURN NZ                          ; if bullet enable is 1, do not update bullet x position
                         LOAD scratch, gs_tankx             ; update unshot bullet x position
                         ADD scratch, 08
                         LOAD gs_tbulletx, scratch
                         RETURN 
            upd_tank_lt: 
                         SUB gs_tankx, gs_tank_speed
                         RETURN NC
                         LOAD gs_tankx, zero
                         RETURN 
            upd_tank_rt: 
                         ADD gs_tankx, gs_tank_speed
                         LOAD scratch, gs_tankx
                         ADD scratch, gs_tank_xdim
                         RETURN NC
                         LOAD gs_tankx, minusone
                         SUB gs_tankx, gs_tank_xdim
                         RETURN 
        load_tbullet_en: 
                         LOAD tbullet_en, one               ; enable bullet enable
                         RETURN 
            upd_tbullet: 
                         LOAD loopvar, gs_tbullet_speed     ; loop for bullety moving up
       upd_tbullet_loop: 
                         SUB loopvar, one
                         RETURN C                           ; needed for some reason I do not know... yet
                         SUB gs_tbullety, one
                         JUMP Z, reset_tbullet
                         FETCH scratch, alien_y
                         COMPARE gs_tbullety, scratch
                         JUMP Z, check_alien_1_hp
                         ADD scratch, 08
                         COMPARE gs_tbullety, scratch
                         JUMP Z, check_alien_2_hp
                         ADD scratch, 08
                         COMPARE gs_tbullety, scratch
                         JUMP Z, check_alien_3_hp
                         ADD scratch, 08
                         COMPARE gs_tbullety, scratch
                         JUMP Z, check_alien_4_hp
                         ADD scratch, 08
                         COMPARE gs_tbullety, scratch
                         JUMP Z, check_alien_5_hp
                         COMPARE shieldshp, FF
                         JUMP Z, restart_upd_bullet_loop
                         COMPARE gs_tbullety, shieldy
                         JUMP Z, check_shield
restart_upd_bullet_loop: 
                         JUMP upd_tbullet_loop
          reset_tbullet: ; reload bullet position when it hits something
                         LOAD scratch, gs_tankx
                         ADD scratch, 08
                         LOAD gs_tbulletx, scratch
                         LOAD scratch, gs_tanky
                         SUB scratch, 03
                         LOAD gs_tbullety, scratch
                         LOAD tbullet_en, zero
                         RETURN 
       check_alien_5_hp: 
                         FETCH scratch, alien_x
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_5_hp_1
                         FETCH scratch, alien_x
                         ADD scratch, 10
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_5_hp_2
                         FETCH scratch, alien_x
                         ADD scratch, 20
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_5_hp_3
                         FETCH scratch, alien_x
                         ADD scratch, 30
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_5_hp_4
                         FETCH scratch, alien_x
                         ADD scratch, 40
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_5_hp_5
                         FETCH scratch, alien_x
                         ADD scratch, 50
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_5_hp_6
                         FETCH scratch, alien_x
                         ADD scratch, 60
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_5_hp_7
                         FETCH scratch, alien_x
                         ADD scratch, 70
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_5_hp_8
                         JUMP restart_upd_bullet_loop
     check_alien_5_hp_1: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 01
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 01
                         STORE scratch, alien_5_hp
                         JUMP reset_tbullet
     check_alien_5_hp_2: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 02
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 02
                         STORE scratch, alien_5_hp
                         JUMP reset_tbullet
     check_alien_5_hp_3: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 04
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 04
                         STORE scratch, alien_5_hp
                         JUMP reset_tbullet
     check_alien_5_hp_4: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 08
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 08
                         STORE scratch, alien_5_hp
                         JUMP reset_tbullet
     check_alien_5_hp_5: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 10
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 10
                         STORE scratch, alien_5_hp
                         JUMP reset_tbullet
     check_alien_5_hp_6: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 20
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 20
                         STORE scratch, alien_5_hp
                         JUMP reset_tbullet
     check_alien_5_hp_7: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 40
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 40
                         STORE scratch, alien_5_hp
                         JUMP reset_tbullet
     check_alien_5_hp_8: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 80
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 80
                         STORE scratch, alien_5_hp
                         JUMP reset_tbullet
       check_alien_4_hp: 
                         FETCH scratch, alien_x
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_4_hp_1
                         FETCH scratch, alien_x
                         ADD scratch, 10
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_4_hp_2
                         FETCH scratch, alien_x
                         ADD scratch, 20
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_4_hp_3
                         FETCH scratch, alien_x
                         ADD scratch, 30
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_4_hp_4
                         FETCH scratch, alien_x
                         ADD scratch, 40
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_4_hp_5
                         FETCH scratch, alien_x
                         ADD scratch, 50
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_4_hp_6
                         FETCH scratch, alien_x
                         ADD scratch, 60
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_4_hp_7
                         FETCH scratch, alien_x
                         ADD scratch, 70
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_4_hp_8
                         JUMP restart_upd_bullet_loop
     check_alien_4_hp_1: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 01
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 01
                         STORE scratch, alien_4_hp
                         JUMP reset_tbullet
     check_alien_4_hp_2: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 02
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 02
                         STORE scratch, alien_4_hp
                         JUMP reset_tbullet
     check_alien_4_hp_3: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 04
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 04
                         STORE scratch, alien_4_hp
                         JUMP reset_tbullet
     check_alien_4_hp_4: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 08
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 08
                         STORE scratch, alien_4_hp
                         JUMP reset_tbullet
     check_alien_4_hp_5: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 10
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 10
                         STORE scratch, alien_4_hp
                         JUMP reset_tbullet
     check_alien_4_hp_6: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 20
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 20
                         STORE scratch, alien_4_hp
                         JUMP reset_tbullet
     check_alien_4_hp_7: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 40
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 40
                         STORE scratch, alien_4_hp
                         JUMP reset_tbullet
     check_alien_4_hp_8: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 80
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 80
                         STORE scratch, alien_4_hp
                         JUMP reset_tbullet
       check_alien_3_hp: 
                         FETCH scratch, alien_x
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_3_hp_1
                         FETCH scratch, alien_x
                         ADD scratch, 10
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_3_hp_2
                         FETCH scratch, alien_x
                         ADD scratch, 20
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_3_hp_3
                         FETCH scratch, alien_x
                         ADD scratch, 30
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_3_hp_4
                         FETCH scratch, alien_x
                         ADD scratch, 40
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_3_hp_5
                         FETCH scratch, alien_x
                         ADD scratch, 50
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_3_hp_6
                         FETCH scratch, alien_x
                         ADD scratch, 60
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_3_hp_7
                         FETCH scratch, alien_x
                         ADD scratch, 70
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_3_hp_8
                         JUMP restart_upd_bullet_loop
     check_alien_3_hp_1: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 01
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 01
                         STORE scratch, alien_3_hp
                         JUMP reset_tbullet
     check_alien_3_hp_2: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 02
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 02
                         STORE scratch, alien_3_hp
                         JUMP reset_tbullet
     check_alien_3_hp_3: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 04
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 04
                         STORE scratch, alien_3_hp
                         JUMP reset_tbullet
     check_alien_3_hp_4: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 08
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 08
                         STORE scratch, alien_3_hp
                         JUMP reset_tbullet
     check_alien_3_hp_5: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 10
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 10
                         STORE scratch, alien_3_hp
                         JUMP reset_tbullet
     check_alien_3_hp_6: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 20
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 20
                         STORE scratch, alien_3_hp
                         JUMP reset_tbullet
     check_alien_3_hp_7: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 40
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 40
                         STORE scratch, alien_3_hp
                         JUMP reset_tbullet
     check_alien_3_hp_8: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 80
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 80
                         STORE scratch, alien_3_hp
                         JUMP reset_tbullet
       check_alien_2_hp: 
                         FETCH scratch, alien_x
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_2_hp_1
                         FETCH scratch, alien_x
                         ADD scratch, 10
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_2_hp_2
                         FETCH scratch, alien_x
                         ADD scratch, 20
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_2_hp_3
                         FETCH scratch, alien_x
                         ADD scratch, 30
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_2_hp_4
                         FETCH scratch, alien_x
                         ADD scratch, 40
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_2_hp_5
                         FETCH scratch, alien_x
                         ADD scratch, 50
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_2_hp_6
                         FETCH scratch, alien_x
                         ADD scratch, 60
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_2_hp_7
                         FETCH scratch, alien_x
                         ADD scratch, 70
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_2_hp_8
                         JUMP restart_upd_bullet_loop
     check_alien_2_hp_1: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 01
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 01
                         STORE scratch, alien_2_hp
                         JUMP reset_tbullet
     check_alien_2_hp_2: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 02
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 02
                         STORE scratch, alien_2_hp
                         JUMP reset_tbullet
     check_alien_2_hp_3: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 04
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 04
                         STORE scratch, alien_2_hp
                         JUMP reset_tbullet
     check_alien_2_hp_4: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 08
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 08
                         STORE scratch, alien_2_hp
                         JUMP reset_tbullet
     check_alien_2_hp_5: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 10
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 10
                         STORE scratch, alien_2_hp
                         JUMP reset_tbullet
     check_alien_2_hp_6: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 20
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 20
                         STORE scratch, alien_2_hp
                         JUMP reset_tbullet
     check_alien_2_hp_7: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 40
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 40
                         STORE scratch, alien_2_hp
                         JUMP reset_tbullet
     check_alien_2_hp_8: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 80
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 80
                         STORE scratch, alien_2_hp
                         JUMP reset_tbullet
       check_alien_1_hp: 
                         FETCH scratch, alien_x
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_1_hp_1
                         FETCH scratch, alien_x
                         ADD scratch, 10
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_1_hp_2
                         FETCH scratch, alien_x
                         ADD scratch, 20
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_1_hp_3
                         FETCH scratch, alien_x
                         ADD scratch, 30
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_1_hp_4
                         FETCH scratch, alien_x
                         ADD scratch, 40
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_1_hp_5
                         FETCH scratch, alien_x
                         ADD scratch, 50
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_1_hp_6
                         FETCH scratch, alien_x
                         ADD scratch, 60
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_1_hp_7
                         FETCH scratch, alien_x
                         ADD scratch, 70
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         ADD scratch, alien_x_dim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, check_alien_1_hp_8
                         JUMP restart_upd_bullet_loop
     check_alien_1_hp_1: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 01
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 01
                         STORE scratch, alien_1_hp
                         JUMP reset_tbullet
     check_alien_1_hp_2: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 02
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 02
                         STORE scratch, alien_1_hp
                         JUMP reset_tbullet
     check_alien_1_hp_3: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 04
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 04
                         STORE scratch, alien_1_hp
                         JUMP reset_tbullet
     check_alien_1_hp_4: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 08
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 08
                         STORE scratch, alien_1_hp
                         JUMP reset_tbullet
     check_alien_1_hp_5: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 10
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 10
                         STORE scratch, alien_1_hp
                         JUMP reset_tbullet
     check_alien_1_hp_6: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 20
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 20
                         STORE scratch, alien_1_hp
                         JUMP reset_tbullet
     check_alien_1_hp_7: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 40
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 40
                         STORE scratch, alien_1_hp
                         JUMP reset_tbullet
     check_alien_1_hp_8: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 80
                         JUMP NC, restart_upd_bullet_loop
                         XOR scratch, 80
                         STORE scratch, alien_1_hp
                         JUMP reset_tbullet
           check_shield: ; check which shield region the bullet is in
                         LOAD scratch, shield1x
                         ADD scratch, shieldxdim
                         COMPARE gs_tbulletx, scratch
                         JUMP C, check_shield1
                         LOAD scratch, shield2x
                         ADD scratch, shieldxdim
                         COMPARE gs_tbulletx, scratch
                         JUMP C, check_shield2
                         LOAD scratch, shield3x
                         ADD scratch, shieldxdim
                         COMPARE gs_tbulletx, scratch
                         JUMP C, check_shield3
                         LOAD scratch, shield4x
                         ADD scratch, shieldxdim
                         COMPARE gs_tbulletx, scratch
                         JUMP C, check_shield4
                         JUMP restart_upd_bullet_loop
          check_shield1: ; checks if the bullet hit shield 1
                         LOAD scratch, shieldshp            ; disregard shield check if shield 1 HP is depleted
                         OR scratch, shield1dead_test
                         XOR scratch, FF
                         JUMP Z, restart_upd_bullet_loop
                         LOAD scratch, shield1x             ; checks bulletx with left game edge
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         LOAD scratch, shield1x             ; checks bulletx with shield 1
                         ADD scratch, shieldxdim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, shield1_hit               ; if hit, update shield 1 and bullet
          check_shield2: ; checks if the bullet hit shield 2
                         LOAD scratch, shieldshp            ; disregard shield check if shield 2 HP is depleted
                         OR scratch, shield2dead_test
                         XOR scratch, FF
                         JUMP Z, restart_upd_bullet_loop
                         LOAD scratch, shield2x             ; checks bulletx with gap between shield 1 and shield 2
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         LOAD scratch, shield2x             ; checks bulletx with shield 2
                         ADD scratch, shieldxdim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, shield2_hit               ; if hit, update shield 2 and bullet
          check_shield3: ; checks if the bullet hit shield 3
                         LOAD scratch, shieldshp            ; disregard shield check if shield 3 HP is depleted
                         OR scratch, shield3dead_test
                         XOR scratch, FF
                         JUMP Z, restart_upd_bullet_loop
                         LOAD scratch, shield3x             ; checks bulletx with gap between shield 2 and shield 3
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         LOAD scratch, shield3x             ; checks bulletx with shield 3
                         ADD scratch, shieldxdim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, shield3_hit               ; if hit, update shield 3 and bullet
          check_shield4: ; checks if the bullet hit shield 4
                         LOAD scratch, shieldshp            ; disregard shield check if shield 4 HP is depleted
                         OR scratch, shield4dead_test
                         XOR scratch, FF
                         JUMP Z, restart_upd_bullet_loop
                         LOAD scratch, shield4x             ; checks bulletx with gap between shield 3 and shield 4
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, restart_upd_bullet_loop
                         LOAD scratch, shield4x             ; checks bulletx with shield 4
                         ADD scratch, shieldxdim
                         COMPARE scratch, gs_tbulletx
                         JUMP NC, shield4_hit               ; if hit, update shield 4 and bullet
            shield1_hit: 
                         LOAD scratch, shieldshp            ; check if shield 1 HP is depleted
                         OR scratch, shield1dead_test
                         XOR scratch, FF
                         JUMP Z, reset_tbullet
                         LOAD scratch, shield1hit
                         ADD shieldshp, scratch
                         JUMP reset_tbullet
            shield2_hit: 
                         LOAD scratch, shieldshp            ; check if shield 2 HP is depleted
                         OR scratch, shield2dead_test
                         XOR scratch, FF
                         JUMP Z, reset_tbullet
                         LOAD scratch, shield2hit
                         ADD shieldshp, scratch
                         JUMP reset_tbullet
            shield3_hit: 
                         LOAD scratch, shieldshp            ; check if shield 3 HP is depleted
                         OR scratch, shield3dead_test
                         XOR scratch, FF
                         JUMP Z, reset_tbullet
                         LOAD scratch, shield3hit
                         ADD shieldshp, scratch
                         JUMP reset_tbullet
            shield4_hit: 
                         LOAD scratch, shieldshp            ; check if shield 4 HP is depleted
                         OR scratch, shield4dead_test
                         XOR scratch, FF
                         JUMP Z, reset_tbullet
                         LOAD scratch, shield4hit
                         ADD shieldshp, scratch
                         JUMP reset_tbullet
            upd_shields: 
                         LOAD scratch, shieldshp
                         OR scratch, shield1dead_test
                         XOR scratch, FF
                         CALL NZ, draw_shield1_full
                         LOAD scratch, shieldshp
                         OR scratch, shield2dead_test
                         XOR scratch, FF
                         CALL NZ, draw_shield2_full
                         LOAD scratch, shieldshp
                         OR scratch, shield3dead_test
                         XOR scratch, FF
                         CALL NZ, draw_shield3_full
                         LOAD scratch, shieldshp
                         OR scratch, shield4dead_test
                         XOR scratch, FF
                         CALL NZ, draw_shield4_full
                         RETURN 
      draw_shield1_full: 
                         LOAD xpos, shield1x                ; draw shield 1
                         LOAD ypos, shieldy
                         JUMP draw_shield
      draw_shield2_full: 
                         LOAD xpos, shield2x                ; draw shield 2
                         LOAD ypos, shieldy
                         JUMP draw_shield
      draw_shield3_full: 
                         LOAD xpos, shield3x                ; draw shield 3
                         LOAD ypos, shieldy
                         JUMP draw_shield
      draw_shield4_full: 
                         LOAD xpos, shield4x                ; draw shield 4
                         LOAD ypos, shieldy
                         JUMP draw_shield
            draw_shield: 
                         CALL moveto
                         SUB ypos, shieldydim
                         CALL drawto
                         ADD xpos, shieldxdim
                         CALL drawto
                         ADD ypos, shieldydim
                         CALL drawto
                         SUB xpos, 09
                         CALL drawto
                         SUB ypos, 06
                         CALL drawto
                         SUB xpos, 06
                         CALL drawto
                         ADD ypos, 06
                         CALL drawto
                         SUB xpos, 09
                         CALL drawto
                         RETURN 
           calc_gameend: 
                         COMPARE gs_minor, gs_minor_onesec
                         JUMP Z, goto_attrone
                         ADD gs_minor, one
                         RETURN 
           goto_attrone: 
                         LOAD gs_major, gs_major_attrone
                         LOAD gs_minor, gs_minor_begins
                         RETURN 
           goto_attrtwo: 
                         LOAD gs_major, gs_major_attrtwo
                         LOAD gs_minor, gs_minor_begins
                         RETURN 
           goto_gameend: 
                         LOAD gs_major, gs_major_gameend
                         LOAD gs_minor, gs_minor_begins
                         RETURN 
                         ;;============================================================================
                         ;; Subroutine: draw_gs
                         ;; This uses the current game state as input, and draws it on the display.
                         ;; This subroutine calls an example of how to output debug or diagnostic info
                         ;; using the leds.  The call to the draw_gs_debug routine (and draw_gs_debug
                         ;; routine itself) can be entirely remove as it is required to play the game.
                         ;;============================================================================
                draw_gs: 
                         CALL draw_gs_debug                 ; for debug info display
                         COMPARE gs_major, gs_major_attrone ; are we in attrone?
                         JUMP Z, draw_attrone               ; do drawing for attrone
                         COMPARE gs_major, gs_major_attrtwo ; are we in attrtwo?
                         JUMP Z, draw_attrtwo               ; do drawing for attrtwo
                         COMPARE gs_major, gs_major_playing ; are we in playing?
                         JUMP Z, draw_playing               ; do drawing for playing
                         COMPARE gs_major, gs_major_gameend ; are we in gameend?
                         JUMP Z, draw_gameend               ; do drawing for gameend
                         RETURN                             ; return
          draw_gs_debug: 
                         OUTPUT gs_major, leds_hi           ; debug display on leds
                         OUTPUT gs_minor, leds_lo           ; debug display on leds
                         RETURN                             ; return
           draw_attrone: 
                         LOAD xpos, 3A                      ;draw letter S
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, 4E                      ; 1
                         CALL drawto
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, 3E                      ; 3
                         CALL drawto
                         LOAD ypos, 7E
                         CALL drawto
                         LOAD xpos, 4E                      ; 5
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 3A                      ; 7
                         CALL drawto
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, 4A                      ; 9
                         CALL drawto
                         LOAD ypos, 82
                         CALL drawto
                         LOAD xpos, 3A                      ; 11
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 58                      ; draw letter p
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, 6C                      ; 1
                         CALL drawto
                         LOAD ypos, 80
                         CALL drawto
                         LOAD xpos, 5C                      ; 3
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 58                      ; 5
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 5C                      ; drawing inside of p
                         LOAD ypos, 74
                         CALL moveto
                         LOAD xpos, 69                      ; 7
                         CALL drawto
                         LOAD ypos, 7C
                         CALL drawto
                         LOAD xpos, 5C                      ; 9
                         CALL drawto
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, 7D                      ; draw letter A
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, 82                      ; 1
                         CALL drawto
                         LOAD xpos, 8A                      ; 2
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 86                      ; 3
                         CALL drawto
                         LOAD xpos, 84                      ; 4
                         LOAD ypos, 83
                         CALL drawto
                         LOAD xpos, 7C                      ; 5
                         CALL drawto
                         LOAD xpos, 7A                      ; 6
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 76                      ; 7
                         CALL drawto
                         LOAD xpos, 7D                      ; 8
                         LOAD ypos, 70
                         CALL drawto                        ; drawing inside of A
                         LOAD ypos, 7D
                         CALL moveto
                         LOAD xpos, 7F                      ; 9
                         LOAD ypos, 73
                         CALL drawto
                         LOAD xpos, 82                      ; 10
                         LOAD ypos, 7D
                         CALL drawto
                         LOAD xpos, 7D                      ; 11
                         CALL drawto
                         LOAD xpos, 94                      ; drawing C
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, A8                      ; 1
                         CALL drawto
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, 98                      ; 3
                         CALL drawto
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, A8                      ; 5
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 94                      ; 7
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, B2                      ; draw E
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, C6                      ; 1
                         CALL drawto
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, B6                      ; 3
                         CALL drawto
                         LOAD ypos, 7E
                         CALL drawto
                         LOAD xpos, C4                      ; 5
                         CALL drawto
                         LOAD ypos, 82
                         CALL drawto
                         LOAD xpos, B6                      ; 7
                         CALL drawto
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, C6                      ; 9
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, B2                      ; 11
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         RETURN 
           draw_attrtwo: 
                         LOAD xpos, 0D                      ; draw letter I
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, 21                      ; 1
                         CALL drawto
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, 19                      ; 3
                         CALL drawto
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, 21                      ; 5
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 0D                      ; 7
                         CALL drawto
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, 15                      ; 9
                         CALL drawto
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, 0D                      ; 11
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 2B                      ; draw letter N
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, 30                      ; 1
                         CALL drawto
                         LOAD xpos, 3B                      ; 2
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 3F                      ; 4
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 3A                      ; 6
                         CALL drawto
                         LOAD xpos, 2F                      ; 7
                         LOAD ypos, 74
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 2B                      ; 9
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 49                      ; draw letter V
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, 4D                      ; 1
                         CALL drawto
                         LOAD xpos, 53                      ; 2
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, 59                      ; 3
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 5D                      ; 4
                         CALL drawto
                         LOAD xpos, 55                      ; 5
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 51                      ; 6
                         CALL drawto
                         LOAD xpos, 49                      ; 7
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 6E                      ; draw letter A
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, 73                      ; 1
                         CALL drawto
                         LOAD xpos, 7B                      ; 2
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 77                      ; 3
                         CALL drawto
                         LOAD xpos, 74                      ; 4
                         LOAD ypos, 83
                         CALL drawto
                         LOAD xpos, 6D                      ; 5
                         CALL drawto
                         LOAD xpos, 6B                      ; 6
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 67                      ; 7
                         CALL drawto
                         LOAD xpos, 6E                      ; 8
                         LOAD ypos, 70
                         CALL drawto                        ; inside of A
                         LOAD ypos, 7D
                         CALL moveto
                         LOAD xpos, 71                      ; 9
                         LOAD ypos, 73
                         CALL drawto
                         LOAD xpos, 73                      ; 10
                         LOAD ypos, 7D
                         CALL drawto
                         LOAD xpos, 6E                      ; 11
                         LOAD ypos, 7D
                         CALL drawto
                         LOAD xpos, 85                      ; draw letter D
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, 8D                      ; 1
                         CALL drawto
                         LOAD xpos, 91                      ; 2
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, 99                      ; 4
                         LOAD ypos, 7C
                         CALL drawto
                         LOAD ypos, 7F
                         CALL drawto
                         LOAD ypos, 82
                         CALL drawto
                         LOAD xpos, 91                      ; 8
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, 8D                      ; 9
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 85                      ; 10
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 85                      ; 11
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 89                      ; inside of letter D
                         LOAD ypos, 74
                         CALL moveto
                         LOAD xpos, 8D                      ; 8
                         CALL drawto
                         LOAD xpos, 95                      ; 9
                         LOAD ypos, 7C
                         CALL drawto
                         LOAD xpos, 95                      ; 10
                         LOAD ypos, 80
                         CALL drawto
                         LOAD xpos, 95                      ; 11
                         LOAD ypos, 84
                         CALL drawto
                         LOAD xpos, 8D                      ; 12
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, 89                      ; 13
                         CALL drawto
                         LOAD xpos, 89                      ; 14
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, A2                      ; draw letter E
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, B6                      ; 1
                         CALL drawto
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, A6                      ; 3
                         CALL drawto
                         LOAD ypos, 7E
                         CALL drawto
                         LOAD xpos, B4                      ; 5
                         CALL drawto
                         LOAD ypos, 82
                         CALL drawto
                         LOAD xpos, A6                      ; 7
                         CALL drawto
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, B6                      ; 9
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, A2                      ; 11
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, C0                      ; draw R
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, D4                      ; 1
                         CALL drawto
                         LOAD ypos, 80
                         CALL drawto
                         LOAD xpos, CA                      ; 3
                         CALL drawto
                         LOAD xpos, D4                      ; 4
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, D0                      ; 5
                         CALL drawto
                         LOAD xpos, C4                      ; 6
                         LOAD ypos, 80
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, C0                      ; 8
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, C4                      ; Inside of R
                         LOAD ypos, 74
                         CALL moveto
                         LOAD xpos, D0                      ; 10
                         CALL drawto
                         LOAD ypos, 7C
                         CALL drawto
                         LOAD xpos, C4                      ; 12
                         CALL drawto
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, DE                      ; draw S
                         LOAD ypos, 70
                         CALL moveto
                         LOAD xpos, F2                      ; 1
                         CALL drawto
                         LOAD ypos, 74
                         CALL drawto
                         LOAD xpos, E2                      ; 3
                         CALL drawto
                         LOAD ypos, 7E
                         CALL drawto
                         LOAD xpos, F2                      ; 5
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, DE                      ; 7
                         CALL drawto
                         LOAD ypos, 8C
                         CALL drawto
                         LOAD xpos, EE                      ; 9
                         CALL drawto
                         LOAD ypos, 82
                         CALL drawto
                         LOAD xpos, DE                      ; 11
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         RETURN 
           draw_playing: 
                         LOAD xpos, gs_tbulletx             ; draw bullet
                         LOAD ypos, gs_tbullety
                         CALL moveto
                         ADD ypos, gs_tbullet_ydim
                         CALL drawto
                         LOAD xpos, gs_tankx                ; draw tank
                         LOAD ypos, gs_tanky
                         CALL moveto
                         ADD ypos, gs_tank_ydim
                         CALL drawto
                         ADD xpos, gs_tank_xdim
                         CALL drawto
                         SUB ypos, gs_tank_ydim
                         CALL drawto
                         SUB xpos, gs_tank_xdim
                         CALL drawto
           draw_alien_1: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 01
                         JUMP NC, draw_alien_2
                         FETCH scratch, alien_x             ;draw 1 alien
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         LOAD ypos, scratch
                         CALL draw_alien
           draw_alien_2: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 02
                         JUMP NC, draw_alien_3
                         FETCH scratch, alien_x             ;draw 2 alien
                         ADD scratch, 10
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         LOAD ypos, scratch
                         CALL draw_alien
           draw_alien_3: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 04
                         JUMP NC, draw_alien_4
                         FETCH scratch, alien_x             ;draw 3 alien
                         ADD scratch, 20
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         LOAD ypos, scratch
                         CALL draw_alien
           draw_alien_4: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 08
                         JUMP NC, draw_alien_5
                         FETCH scratch, alien_x             ;draw 4 alien
                         ADD scratch, 30
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         LOAD ypos, scratch
                         CALL draw_alien
           draw_alien_5: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 10
                         JUMP NC, draw_alien_6
                         FETCH scratch, alien_x             ;draw 5 alien
                         ADD scratch, 40
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         LOAD ypos, scratch
                         CALL draw_alien
           draw_alien_6: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 20
                         JUMP NC, draw_alien_7
                         FETCH scratch, alien_x             ;draw 6 alien
                         ADD scratch, 50
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         LOAD ypos, scratch
                         CALL draw_alien
           draw_alien_7: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 40
                         JUMP NC, draw_alien_8
                         FETCH scratch, alien_x             ;draw 7 alien
                         ADD scratch, 60
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         LOAD ypos, scratch
                         CALL draw_alien
           draw_alien_8: 
                         FETCH scratch, alien_1_hp
                         TEST scratch, 80
                         JUMP NC, draw_alien_9
                         FETCH scratch, alien_x             ;draw 8 alien
                         ADD scratch, 70
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         LOAD ypos, scratch
                         CALL draw_alien
           draw_alien_9: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 01
                         JUMP NC, draw_alien_10
                         FETCH scratch, alien_x             ;draw 9 alien
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 08
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_10: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 02
                         JUMP NC, draw_alien_11
                         FETCH scratch, alien_x             ;draw 10 alien
                         ADD scratch, 10
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 08
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_11: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 04
                         JUMP NC, draw_alien_12
                         FETCH scratch, alien_x             ;draw 11 alien
                         ADD scratch, 20
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 08
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_12: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 08
                         JUMP NC, draw_alien_13
                         FETCH scratch, alien_x             ;draw 12 alien
                         ADD scratch, 30
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 08
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_13: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 10
                         JUMP NC, draw_alien_14
                         FETCH scratch, alien_x             ;draw 13 alien
                         ADD scratch, 40
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 08
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_14: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 20
                         JUMP NC, draw_alien_15
                         FETCH scratch, alien_x             ;draw 14 alien
                         ADD scratch, 50
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 08
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_15: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 40
                         JUMP NC, draw_alien_16
                         FETCH scratch, alien_x             ;draw 15 alien
                         ADD scratch, 60
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 08
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_16: 
                         FETCH scratch, alien_2_hp
                         TEST scratch, 80
                         JUMP NC, draw_alien_17
                         FETCH scratch, alien_x             ;draw 16 alien
                         ADD scratch, 70
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 08
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_17: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 01
                         JUMP NC, draw_alien_18
                         FETCH scratch, alien_x             ;draw 17 alien
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 10
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_18: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 02
                         JUMP NC, draw_alien_19
                         FETCH scratch, alien_x             ;draw 18 alien
                         ADD scratch, 10
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 10
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_19: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 04
                         JUMP NC, draw_alien_20
                         FETCH scratch, alien_x             ;draw 19 alien
                         ADD scratch, 20
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 10
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_20: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 08
                         JUMP NC, draw_alien_21
                         FETCH scratch, alien_x             ;draw 20 alien
                         ADD scratch, 30
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 10
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_21: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 10
                         JUMP NC, draw_alien_22
                         FETCH scratch, alien_x             ;draw 21 alien
                         ADD scratch, 40
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 10
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_22: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 20
                         JUMP NC, draw_alien_23
                         FETCH scratch, alien_x             ;draw 22 alien
                         ADD scratch, 50
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 10
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_23: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 40
                         JUMP NC, draw_alien_24
                         FETCH scratch, alien_x             ;draw 23 alien
                         ADD scratch, 60
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 10
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_24: 
                         FETCH scratch, alien_3_hp
                         TEST scratch, 80
                         JUMP NC, draw_alien_25
                         FETCH scratch, alien_x             ;draw 24 alien
                         ADD scratch, 70
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 10
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_25: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 01
                         JUMP NC, draw_alien_26
                         FETCH scratch, alien_x             ;draw 25 alien
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 18
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_26: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 02
                         JUMP NC, draw_alien_27
                         FETCH scratch, alien_x             ;draw 26 alien
                         ADD scratch, 10
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 18
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_27: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 04
                         JUMP NC, draw_alien_28
                         FETCH scratch, alien_x             ;draw 27 alien
                         ADD scratch, 20
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 18
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_28: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 08
                         JUMP NC, draw_alien_29
                         FETCH scratch, alien_x             ;draw 28 alien
                         ADD scratch, 30
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 18
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_29: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 10
                         JUMP NC, draw_alien_30
                         FETCH scratch, alien_x             ;draw 29 alien
                         ADD scratch, 40
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 18
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_30: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 20
                         JUMP NC, draw_alien_31
                         FETCH scratch, alien_x             ;draw 30 alien
                         ADD scratch, 50
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 18
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_31: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 40
                         JUMP NC, draw_alien_32
                         FETCH scratch, alien_x             ;draw 31 alien
                         ADD scratch, 60
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 18
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_32: 
                         FETCH scratch, alien_4_hp
                         TEST scratch, 80
                         JUMP NC, draw_alien_33
                         FETCH scratch, alien_x             ;draw 32 alien
                         ADD scratch, 70
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 18
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_33: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 01
                         JUMP NC, draw_alien_34
                         FETCH scratch, alien_x             ;draw 33 alien
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 20
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_34: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 02
                         JUMP NC, draw_alien_35
                         FETCH scratch, alien_x             ;draw 34 alien
                         ADD scratch, 10
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 20
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_35: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 04
                         JUMP NC, draw_alien_36
                         FETCH scratch, alien_x             ;draw 35 alien
                         ADD scratch, 20
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 20
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_36: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 08
                         JUMP NC, draw_alien_37
                         FETCH scratch, alien_x             ;draw 36 alien
                         ADD scratch, 30
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 20
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_37: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 10
                         JUMP NC, draw_alien_38
                         FETCH scratch, alien_x             ;draw 37 alien
                         ADD scratch, 40
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 20
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_38: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 20
                         JUMP NC, draw_alien_39
                         FETCH scratch, alien_x             ;draw 38 alien
                         ADD scratch, 50
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 20
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_39: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 40
                         JUMP NC, draw_alien_40
                         FETCH scratch, alien_x             ;draw 39 alien
                         ADD scratch, 60
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 20
                         LOAD ypos, scratch
                         CALL draw_alien
          draw_alien_40: 
                         FETCH scratch, alien_5_hp
                         TEST scratch, 80
                         RETURN NC
                         FETCH scratch, alien_x             ;draw 40 alien
                         ADD scratch, 70
                         LOAD xpos, scratch
                         FETCH scratch, alien_y
                         ADD scratch, 20
                         LOAD ypos, scratch
                         CALL draw_alien
                         RETURN 
             draw_alien: 
                         CALL moveto
                         ADD xpos, alien_x_dim
                         CALL drawto
                         ADD ypos, alien_y_dim
                         CALL drawto
                         SUB xpos, alien_x_dim
                         CALL drawto
                         SUB ypos, alien_y_dim
                         CALL drawto
                         RETURN 
           draw_gameend: 
                         LOAD xpos, 48                      ; draw letter d
                         LOAD ypos, 50
                         CALL moveto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 28
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 48
                         CALL drawto
                         LOAD xpos, 58                      ; draw letter o
                         LOAD ypos, 70
                         CALL moveto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, 78
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, 58
                         CALL drawto
                         LOAD xpos, 88                      ; draw letter n
                         LOAD ypos, 90
                         CALL moveto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, A8
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         LOAD xpos, D8                      ; draw letter e
                         CALL moveto
                         LOAD xpos, B8
                         LOAD ypos, 90
                         CALL drawto
                         LOAD ypos, 70
                         CALL drawto
                         LOAD xpos, D8
                         CALL drawto
                         LOAD ypos, 90
                         CALL drawto
                         RETURN 
                         ;;============================================================================
                         ;; Subroutine: moveto and drawto
                         ;; The moveto routine uses the global variables xpos and ypos, and the drawto
                         ;; routine uses these global variables as well as the endpoint coordinates in
                         ;; the display controller.  Moveto simply copies xpos and ypos into endpoint
                         ;; coordinates in the display controller, it does not draw anything.  The
                         ;; drawto routine copies endpoint coordinates to startpoint coordinates (does
                         ;; not matter if the endpoint was from an actual draw, or simply an update
                         ;; by moveto) and then copies xpos and ypos into endpoint coordinates, then
                         ;; starts a linedraw.
                         ;;============================================================================
                 moveto: 
                         OUTPUT xpos, endx                  ; copy global to hardware
                         OUTPUT ypos, endy                  ; copy global to hardware
                         RETURN                             ; return
                 drawto: 
                         INPUT scratch, endx                ; read hardware
                         OUTPUT scratch, stax               ; write hardware
                         OUTPUT xpos, endx                  ; copy global to hardware
                         INPUT scratch, endy                ; read hardware
                         OUTPUT scratch, stay               ; write hardware
                         OUTPUT ypos, endy                  ; copy global to hardware
                         LOAD scratch, busy_go              ; prepare the command
                         OUTPUT scratch, busy               ; send the command
                         CALL hw_init_wait                  ; wait line draw done
                         RETURN                             ; return
                         ;;============================================================================
                         ;; Interrupt - Vector.
                         ;;============================================================================
                         ADDRESS 7FF                        ; must be located here
             isr_vector: 
                         JUMP isr                           ; always jump to isr
                         ;;============================================================================
                         ;;
                         ;;============================================================================
